(* Interface to easymesh -- gathering the FORTRAN and C layouts together
 ***********************************************************************)

(* Put the full path if not in your search path. *)
let easymesh = "EasyMesh"

open Printf


(* BEWARE that the result type of [read] must be in accordance with
   the layout. *)
let read (layout : 'a Bigarray.layout) fname : 'a Mesh.t =
  if layout = (Obj.magic Bigarray.c_layout : 'a Bigarray.layout) then
    Obj.magic (read_c fname)
  else
    Obj.magic (read_fortran fname)


let triangulate ~max_area (pslg: 'a Mesh.t) =
  (* Save domain file *)
  let (fname, fh) = Filename.open_temp_file "EasyMesh" ".d" in
  let fname = Filename.chop_extension fname in
  output_string fh "# EasyMesh domain file generated by OCaml Mesh module #\n";
  if is_c_layout pslg then
    output_pslg_c fh (Obj.magic (pslg : 'a t)) max_area
  else
    output_pslg_fortran fh (Obj.magic (pslg : 'a t)) max_area;
  close_out fh;
  (* Execute easymesh *)
  let err = Sys.command (sprintf "%s %s -m" easymesh fname) in
(*   if err <> 0 then *)
(*     failwith(sprintf "Easymesh.triangulate: %s returned status %i" *)
(*                easymesh err); *)
  (* Read the result *)
  let mesh = read (Array2.layout pslg.point) fname in
  Sys.remove (fname ^ ".d");
  Sys.remove (fname ^ ".n");
  Sys.remove (fname ^ ".e");
  Sys.remove (fname ^ ".s");
  mesh
